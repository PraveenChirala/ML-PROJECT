import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load dataset
file_path = r'C:\Users\pk339\OneDrive\Desktop\imdb.csv'
dataset = pd.read_csv(file_path)

# Prepare the data
X = dataset['review']
y = dataset['sentiment'].map({'positive': 1, 'negative': 0})  # Assuming 'sentiment' column has 'positive' and 'negative' values

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Preprocess the data using TF-IDF Vectorizer
vectorizer = TfidfVectorizer(max_features=10000, stop_words='english')
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Build and train the model
model = LogisticRegression(max_iter=1000)
model.fit(X_train_tfidf, y_train)

# Evaluate the model
y_pred = model.predict(X_test_tfidf)
accuracy = accuracy_score(y_test, y_pred)
print(f'Test Accuracy: {accuracy}')

# Predict sentiment
def predict_sentiment(review):
    review_tfidf = vectorizer.transform([review])
    prediction = model.predict(review_tfidf)
    return "Positive" if prediction == 1 else "Negative"

# Example prediction
review = "This movie was fantastic!"
print(predict_sentiment(review))
